name: E2e tests

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  cypress-run:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version:
          - 14.x
        vegawallet-version:
          - "0.11.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: Node
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}
      # Download and restore a wallet
      - name: Download wallet
        run: curl -L https://github.com/vegaprotocol/vegawallet/releases/download/v${{ matrix.vegawallet-version }}/vegawallet-linux-amd64.zip -O
      - name: Unzip wallet
        run: unzip ./vegawallet-linux-amd64.zip
      - name: Create passphrase
        run: echo "${{ secrets.PASSWORD }}" > ./passphrase
      - name: Create recovery
        run: echo "${{ secrets.RECOVERY_PHRASE }}" > ./recovery
      - name: Initialize wallet
        run: ./vegawallet init -f
      - name: Import wallet
        run: ./vegawallet import -w test --recovery-phrase-file ./recovery -p ./passphrase

      # Setup TESTNET config and start service on testnet
      - name: Import config
        run: ./vegawallet network import --from-url https://raw.githubusercontent.com/vegaprotocol/networks/master/fairground/fairground.toml
      - name: Start service
        run: ./vegawallet service run --network fairground &

      - name: Install root dependencies
        run: yarn install

      - name: Start server in the background
        run: yarn start:test &

      # Install yarn automation/ dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          wait-on: "http://localhost:3000"
          working-directory: automation
          wait-on-timeout: 120
          record: true
          config-file: e2e.json
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # pass the project ID from the secrets through environment variable
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          # pass cypress integration test private key
          CYPRESS_INTEGRATION_TEST_PRIVATE_KEY: ${{ secrets.CYPRESS_INTEGRATION_TEST_PRIVATE_KEY }}
          CYPRESS_VEGA_WALLET_PASSWORD: ${{ secrets.PASSWORD }}
